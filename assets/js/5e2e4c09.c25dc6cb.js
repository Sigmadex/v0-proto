"use strict";(self.webpackChunkdocusaur=self.webpackChunkdocusaur||[]).push([[189],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||s[f]||i;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},865:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={},p="IERC1155",c={unversionedId:"Api Specification/interfaces/IERC1155",id:"Api Specification/interfaces/IERC1155",isDocsHomePage:!1,title:"IERC1155",description:"Required interface of an ERC1155 compliant contract, as defined in the",source:"@site/docs/Api Specification/interfaces/IERC1155.md",sourceDirName:"Api Specification/interfaces",slug:"/Api Specification/interfaces/IERC1155",permalink:"/v0-proto/docs/Api Specification/interfaces/IERC1155",editUrl:"https://github.com/Sigmadex/v0-proto/docs/Api Specification/interfaces/IERC1155.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IDiamondLoupe",permalink:"/v0-proto/docs/Api Specification/interfaces/IDiamondLoupe"},next:{title:"IERC165",permalink:"/v0-proto/docs/Api Specification/interfaces/IERC165"}},d=[{value:"Functions",id:"functions",children:[{value:"mint",id:"mint",children:[{value:"Declaration",id:"declaration",children:[],level:4},{value:"Modifiers:",id:"modifiers",children:[],level:4}],level:3},{value:"balanceOf",id:"balanceof",children:[{value:"Declaration",id:"declaration-1",children:[],level:4},{value:"Modifiers:",id:"modifiers-1",children:[],level:4}],level:3},{value:"balanceOfBatch",id:"balanceofbatch",children:[{value:"Declaration",id:"declaration-2",children:[],level:4},{value:"Modifiers:",id:"modifiers-2",children:[],level:4}],level:3},{value:"setApprovalForAll",id:"setapprovalforall",children:[{value:"Declaration",id:"declaration-3",children:[],level:4},{value:"Modifiers:",id:"modifiers-3",children:[],level:4}],level:3},{value:"isApprovedForAll",id:"isapprovedforall",children:[{value:"Declaration",id:"declaration-4",children:[],level:4},{value:"Modifiers:",id:"modifiers-4",children:[],level:4}],level:3},{value:"safeTransferFrom",id:"safetransferfrom",children:[{value:"Declaration",id:"declaration-5",children:[],level:4},{value:"Modifiers:",id:"modifiers-5",children:[],level:4}],level:3},{value:"safeBatchTransferFrom",id:"safebatchtransferfrom",children:[{value:"Declaration",id:"declaration-6",children:[],level:4},{value:"Modifiers:",id:"modifiers-6",children:[],level:4}],level:3}],level:2},{value:"Events",id:"events",children:[{value:"TransferSingle",id:"transfersingle",children:[],level:3},{value:"TransferBatch",id:"transferbatch",children:[],level:3},{value:"ApprovalForAll",id:"approvalforall",children:[],level:3},{value:"URI",id:"uri",children:[],level:3}],level:2}],s={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ierc1155"},"IERC1155"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Required interface of an ERC1155 compliant contract, as defined in the\n",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1155%5BEIP%5D"},"https://eips.ethereum.org/EIPS/eip-1155[EIP]"),".")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Available since v3.1.")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"mint"},"mint"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Diamond mint")),(0,i.kt)("h4",{id:"declaration"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function mint(\n  ) external\n")),(0,i.kt)("h4",{id:"modifiers"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"balanceof"},"balanceOf"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Returns the amount of tokens of token type ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," owned by ",(0,i.kt)("inlineCode",{parentName:"p"},"account"),".")),(0,i.kt)("p",null,"Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"account")," cannot be the zero address.")),(0,i.kt)("h4",{id:"declaration-1"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function balanceOf(\n  ) external returns (uint256)\n")),(0,i.kt)("h4",{id:"modifiers-1"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"balanceofbatch"},"balanceOfBatch"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"xref:ROOT:erc1155.adoc#batch-operations","[Batched]"," version of {balanceOf}.")),(0,i.kt)("p",null,"Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"accounts")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ids")," must have the same length.")),(0,i.kt)("h4",{id:"declaration-2"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function balanceOfBatch(\n  ) external returns (uint256[])\n")),(0,i.kt)("h4",{id:"modifiers-2"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"setapprovalforall"},"setApprovalForAll"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Grants or revokes permission to ",(0,i.kt)("inlineCode",{parentName:"p"},"operator")," to transfer the caller's tokens, according to ",(0,i.kt)("inlineCode",{parentName:"p"},"approved"),",")),(0,i.kt)("p",null,"Emits an {ApprovalForAll} event."),(0,i.kt)("p",null,"Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"operator")," cannot be the caller.")),(0,i.kt)("h4",{id:"declaration-3"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setApprovalForAll(\n  ) external\n")),(0,i.kt)("h4",{id:"modifiers-3"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"isapprovedforall"},"isApprovedForAll"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Returns true if ",(0,i.kt)("inlineCode",{parentName:"p"},"operator")," is approved to transfer ",(0,i.kt)("inlineCode",{parentName:"p"},"account"),"'s tokens.")),(0,i.kt)("p",null,"See {setApprovalForAll}."),(0,i.kt)("h4",{id:"declaration-4"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function isApprovedForAll(\n  ) external returns (bool)\n")),(0,i.kt)("h4",{id:"modifiers-4"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"safetransferfrom"},"safeTransferFrom"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Transfers ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," tokens of token type ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"to"),".")),(0,i.kt)("p",null,"Emits a {TransferSingle} event."),(0,i.kt)("p",null,"Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to")," cannot be the zero address."),(0,i.kt)("li",{parentName:"ul"},"If the caller is not ",(0,i.kt)("inlineCode",{parentName:"li"},"from"),", it must be have been approved to spend ",(0,i.kt)("inlineCode",{parentName:"li"},"from"),"'s tokens via {setApprovalForAll}."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from")," must have a balance of tokens of type ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," of at least ",(0,i.kt)("inlineCode",{parentName:"li"},"amount"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\nacceptance magic value.")),(0,i.kt)("h4",{id:"declaration-5"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function safeTransferFrom(\n  ) external\n")),(0,i.kt)("h4",{id:"modifiers-5"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h3",{id:"safebatchtransferfrom"},"safeBatchTransferFrom"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"xref:ROOT:erc1155.adoc#batch-operations","[Batched]"," version of {safeTransferFrom}.")),(0,i.kt)("p",null,"Emits a {TransferBatch} event."),(0,i.kt)("p",null,"Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ids")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"amounts")," must have the same length."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\nacceptance magic value.")),(0,i.kt)("h4",{id:"declaration-6"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function safeBatchTransferFrom(\n  ) external\n")),(0,i.kt)("h4",{id:"modifiers-6"},"Modifiers:"),(0,i.kt)("p",null,"No modifiers"),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("h3",{id:"transfersingle"},"TransferSingle"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Emitted when ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," tokens of token type ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," are transferred from ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"operator"),".")),(0,i.kt)("h3",{id:"transferbatch"},"TransferBatch"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Equivalent to multiple {TransferSingle} events, where ",(0,i.kt)("inlineCode",{parentName:"p"},"operator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," are the same for all\ntransfers.")),(0,i.kt)("h3",{id:"approvalforall"},"ApprovalForAll"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Emitted when ",(0,i.kt)("inlineCode",{parentName:"p"},"account")," grants or revokes permission to ",(0,i.kt)("inlineCode",{parentName:"p"},"operator")," to transfer their tokens, according to\n",(0,i.kt)("inlineCode",{parentName:"p"},"approved"),".")),(0,i.kt)("h3",{id:"uri"},"URI"),(0,i.kt)("p",null,"No description"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Emitted when the URI for token type ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," changes to ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", if it is a non-programmatic URI.")),(0,i.kt)("p",null,"If an {URI} event was emitted for ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", the standard\n",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions%5Bguarantees%5D"},"https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees]")," that ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," will equal the value\nreturned by {IERC1155MetadataURI-uri}."))}u.isMDXComponent=!0}}]);